# Descriptive stats table: mean and SE per condition
desc_tbl <- learning_acc_df %>%
group_by(cond) %>%
summarise(
n        = n(),
mean_acc = mean(mean_acc_LE),
sd_acc   = sd(mean_acc_LE),
sem_acc  = sd_acc / sqrt(n),
.groups  = "drop"
) %>%
mutate(
mean_acc = round(mean_acc, 2),
sd_acc   = round(sd_acc, 2),
sem_acc  = round(sem_acc, 2)
)
write.csv(
desc_tbl,
"D:/Aberdeen_Uni_June24/cap/THESIS/Pilot_Analysis/pilot_table_LE_descriptives.csv",
row.names = FALSE
)
# 1. Make sure cond is a factor
learning_acc_df <- learning_acc_df %>%
mutate(cond = factor(cond, levels = c("62.5/37.5", "75/25", "87.5/12.5")))
#convenience
ez_out <- ezANOVA(
data        = learning_acc_df,
dv          = .(mean_acc_LE),
wid         = .(sub_id),
within      = .(cond),
type        = 3,
detailed    = TRUE
)
print(ez_out)
##########################################################################
posthoc <- learning_acc_df %>%
pairwise_t_test(
mean_acc_LE ~ cond,
paired         = TRUE,
p.adjust.method = "bonferroni",
conf.level      = 0.95,
detailed        = TRUE
)
posthoc
learning_acc_df %>%
group_by(cond) %>%
summarise(
n         = n(),
mean_acc  = mean(mean_acc_LE),
sd_acc    = sd(mean_acc_LE),
sem_acc   = sd_acc / sqrt(n),
.groups   = "drop"
)
# posthoc table
posthoc_tbl <- posthoc %>%
mutate(
contrast  = paste(group1, "–", group2),
estimate  = round(estimate, 2),
statistic = round(statistic, 2),
conf.low  = round(conf.low, 2),
conf.high = round(conf.high, 2),
p.adj     = round(p.adj, 2)
) %>%
select(contrast, estimate, conf.low, conf.high, statistic, df, p.adj)
write.csv(
posthoc_tbl,
"D:/Aberdeen_Uni_June24/cap/THESIS/Pilot_Analysis/pilot_table_LE.csv",
row.names = FALSE
)
# Descriptive stats table: mean and SE per condition
desc_tbl <- learning_acc_df %>%
group_by(cond) %>%
summarise(
n        = n(),
mean_acc = mean(mean_acc_LE),
sd_acc   = sd(mean_acc_LE),
sem_acc  = sd_acc / sqrt(n),
.groups  = "drop"
) %>%
mutate(
mean_acc = round(mean_acc, 2),
sd_acc   = round(sd_acc, 2),
sem_acc  = round(sem_acc, 2)
)
write.csv(
desc_tbl,
"D:/Aberdeen_Uni_June24/cap/THESIS/Pilot_Analysis/pilot_table_LE_descriptives.csv",
row.names = FALSE
)
learning_rt_df <- data %>%
filter(phase == "LE",
cond %in% learning_cond,
!sub_id %in% excluded_subs) %>%
group_by(sub_id, cond) %>%
summarise(mean_rt_LE = mean(rtime) * 1000,
.groups = "drop") %>%
mutate(cond = factor(cond, levels = c(3, 2, 1),
labels = c("62.5/37.5", "75/25", "87.5/12.5")),
cond_num  = as.numeric(cond),
jittered_x = cond_num + runif(n(), -0.10, 0.10))
# Group means for red asterisks
mean_points_rt <- learning_rt_df %>%
group_by(cond) %>%
summarise(mean_val = mean(mean_rt_LE), .groups = "drop")
# Plot
learning_rt_plot <- ggplot() +
geom_boxplot(data = learning_rt_df,aes(x = cond, y = mean_rt_LE, fill = cond),width = 0.55, outlier.shape = NA, alpha = 0.7) +
geom_line(data = learning_rt_df,aes(x = jittered_x, y = mean_rt_LE, group = sub_id),color = "black", alpha = 0.3) +
geom_point(data = learning_rt_df,aes(x = jittered_x, y = mean_rt_LE),color = "black", size = 2, alpha = 0.7) +
geom_text(data = mean_points_rt,aes(x = cond, y = mean_val, label = "*"),color = "red", size = 10, fontface = "bold") +
scale_fill_manual(values = cond_colors, guide = "none") +
labs(
title = "Mean Reaction Time Across Blocks in the LE Phase",
x = "Condition",
y = "Mean Reaction Time (ms)"
) +
theme_minimal(base_size = 14) +
theme(
panel.grid.major.y = element_line(color = "gray80", size = 0.4),
panel.grid.major.x = element_blank(),
panel.grid.minor   = element_blank(),
axis.ticks.x = element_line(color = "black"),
axis.ticks.y = element_blank(),
axis.ticks.length = unit(4, "pt"),
axis.line = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size = 16, face = "bold"),
axis.text.x  = element_text(size = 14, color = "black"),
axis.text.y  = element_text(size = 14, color = "black")
)
fig_out_rt <- "D:/Aberdeen_Uni_June24/cap/THESIS/Pilot_Analysis/Figures/Pilot_EXP_Mean_RT_LE_cond.pdf"
ggsave(filename = fig_out_rt, plot = learning_rt_plot, width = 8, height = 6, dpi = 300)
learning_rt_plot
library(dplyr)
learning_rt_df <- data %>%
filter(phase == "LE",
cond %in% learning_cond,
!sub_id %in% excluded_subs) %>%
mutate(
logRT = log(rtime)
) %>%
group_by(sub_id, cond) %>%
summarise(
mean_logRT = mean(logRT),
.groups = "drop"
) %>%
mutate(
cond = factor(cond,levels = c(3, 2, 1),labels = c("62.5/37.5", "75/25", "87.5/12.5"))
)
ez_rt <- ezANOVA(
data     = learning_rt_df,
dv       = .(mean_logRT),
wid      = .(sub_id),
within   = .(cond),
type     = 3,
detailed = TRUE
)
posthoc_rt <- learning_rt_df %>%
pairwise_t_test(
mean_logRT ~ cond,
paired          = TRUE,
p.adjust.method = "bonferroni",
conf.level      = 0.95,
detailed        = TRUE
)
posthoc_rt
exp(posthoc_rt$estimate)
learning_rt_df %>%
group_by(cond) %>%
summarise(
n          = n(),
geo_meanRT = exp(mean(mean_logRT)),
sd_logRT   = sd(mean_logRT),
sem_logRT  = sd_logRT / sqrt(n),
.groups    = "drop"
)
data <- read.csv(file)
# phase ES
phase_filter <- "ES"
excluded_subjects <- c()    #1, 4, 5, 6, 14, 99
data <- data %>%
filter(phase == phase_filter & !sub_id %in% excluded_subjects) %>%
drop_na(OVcate_2, chose_right)
data <- data %>%
group_by(sub_id, OVcate_2) %>%
mutate(rtime_bin = cut(rtime,
breaks = unique(quantile(rtime, probs = seq(0, 1, length.out = 6), na.rm = TRUE)),
labels = 1:(length(unique(quantile(rtime, probs = seq(0, 1, length.out = 6), na.rm = TRUE))) - 1),
include.lowest = TRUE)) %>%
ungroup()
# chose_right == 0  = “E” chosen
# chose_right == 1  = “S” chosen
agg <- data %>%
group_by(sub_id, rtime_bin) %>%
summarise(
p_E = mean(chose_right == 0, na.rm = TRUE),
p_S = mean(chose_right == 1, na.rm = TRUE),
.groups = "drop"
) %>%                                # long format makes life easier for ggplot
pivot_longer(cols = c(p_E, p_S),
names_to  = "Choice",
values_to = "prob") %>%
mutate(Choice = factor(Choice,
levels = c("p_E", "p_S"),
labels = c("E", "S")))
# mean + SEM per participant
summary_df <- agg %>%
group_by(rtime_bin, Choice) %>%
summarise(
mean_prob = mean(prob, na.rm = TRUE),
sem       = sd(prob,  na.rm = TRUE) / sqrt(n()),
.groups   = "drop"
)
summary_df$rtime_bin <- factor(
summary_df$rtime_bin,
levels = 1:5,
labels = c("0-20%", "20-40%", "40-60%", "60-80%", "80-100%")
)
p <- ggplot(summary_df,
aes(x = rtime_bin,
y = mean_prob,
fill = Choice)) +
geom_col(position = position_dodge(width = 0.8),
width     = 0.75) +
geom_errorbar(aes(ymin = mean_prob - sem,
ymax = mean_prob + sem),
width     = 0.2,
linewidth = 0.7,
position  = position_dodge(width = 0.8)) +
geom_hline(yintercept = 0.5, linetype = "dotted") +
scale_fill_manual(values = c("E" = "steelblue", "S" = "darkorchid"),
name   = "Chosen option") +
labs(title = "Probability of Choosing E vs S by RT bin (ES Phase)",
x     = "RT Bin (shortest to longest RT)",
y     = "Probability") +
theme_minimal(base_size = 15) +
theme(
legend.position   = "top",
axis.line         = element_line(colour = "black"),
panel.grid.major  = element_blank(),
panel.grid.minor  = element_blank(),
axis.text.x       = element_text(color = "black"),
axis.text.y       = element_text(color = "black")
)
#ggsave("D:/Aberdeen_Uni_June24/cap/THESIS/Pilot_Analysis/Figures/ES_rtimeAdvantage_E_vs_S.svg")
print(p)
# print shapiro test results
shapiro_results_corr
# repeated measures ANOVA
anova_results <- accuracy_df %>%
anova_test(dv = Mean_Accuracy, wid = sub_id, within = phase)
anova_table <- get_anova_table(anova_results)
fig_out <- "D:/Aberdeen_Uni_June24/cap/THESIS/Pilot_Analysis/Figures/Pilot_EXP_Mean_Acc_LE_ES_EE_NEW.pdf"
# repeated measures ANOVA
anova_results <- accuracy_df %>%
anova_test(dv = Mean_Accuracy, wid = sub_id, within = phase)
anova_table <- get_anova_table(anova_results)
#order
accuracy_df <- accuracy_df %>%
mutate(phase = factor(phase, levels = c("LE", "ES")))
phase_colors <- c("ES" = "darkorchid", "LE" = "rosybrown")
plot_df <- accuracy_df %>%
group_by(sub_id, phase) %>%
summarise(Mean_Accuracy = mean(Mean_Accuracy), .groups = "drop") %>%
mutate(
phase_num = as.numeric(factor(phase, levels = c("LE", "ES"))),
jittered_x = phase_num + runif(n(), -0.1, 0.1)
)
# means for asterisks
accuracy_summary <- plot_df %>%
group_by(phase) %>%
summarise(mean_accuracy = mean(Mean_Accuracy), .groups = "drop")
accuracy_plot <- ggplot() +
geom_boxplot(data = plot_df,aes(x = phase, y = Mean_Accuracy, fill = phase),width = 0.5, alpha = 0.7) +
geom_line(data = plot_df,aes(x = jittered_x, y = Mean_Accuracy, group = sub_id),color = "black", alpha = 0.3) +
geom_point(data = plot_df,aes(x = jittered_x, y = Mean_Accuracy),color = "black", size = 2, alpha = 0.7) +
geom_text(data = accuracy_summary,aes(x = phase, y = mean_accuracy, label = "*"),color = "red", size = 10, fontface = "bold") +
scale_fill_manual(values = phase_colors) +
labs(
title = "Mean Accuracy Across Phases",
x     = "Phase",
y     = "Mean Accuracy (%)"
) +
theme_minimal(base_size = 14) +
theme(
panel.grid.major.y = element_line(color = "gray80", size = 0.4),
panel.grid.major.x = element_blank(),
panel.grid.minor   = element_blank(),
axis.ticks.x       = element_line(color = "black"),
axis.ticks.y       = element_blank(),
axis.ticks.length  = unit(4, "pt"),
axis.line          = element_blank(),
plot.title         = element_text(size = 23, face = "bold"),
axis.title.x       = element_text(size = 17, face = "bold"),
axis.title.y       = element_text(size = 17, face = "bold"),
axis.text.x        = element_text(size = 15,  color = "black"),
axis.text.y        = element_text(size = 15, color = "black")
)
fig_out <- "D:/Aberdeen_Uni_June24/cap/THESIS/Pilot_Analysis/Figures/Pilot_EXP_Mean_Acc_LE_ES_EE.pdf"
ggsave(filename = fig_out, plot = accuracy_plot, width = 8, height = 6, dpi = 300)
accuracy_plot
anova_results %>% get_anova_table()
anova_afex <- aov_ez(id = "sub_id", dv = "Mean_Accuracy", within = "phase", data = accuracy_df)
summary(anova_afex)
# mean and SEM for each phase
accuracy_summary <- accuracy_df %>%
group_by(phase) %>%
summarise(
mean_accuracy = mean(Mean_Accuracy),
sd_accuracy = sd(Mean_Accuracy),
n = n(),
sem_accuracy = sd_accuracy / sqrt(n)
)
print(accuracy_summary)
anova_table
# post hoc tests
posthoc_results <- accuracy_df %>%
pairwise_t_test(Mean_Accuracy ~ phase, paired = TRUE, p.adjust.method = "bonferroni", detailed = TRUE)
posthoc_results
names(posthoc_results)
posthoc_results %>% select(group1, group2, p.adj)
wide_df <- accuracy_df %>%
pivot_wider(
id_cols     = sub_id,
names_from  = phase,
values_from = Mean_Accuracy
)
cohen.d(wide_df$LE, wide_df$ES, paired = TRUE)  # LE vs ES
cohen.d(wide_df$LE, wide_df$EE, paired = TRUE)  # LE vs EE
# Same filter for ES
es_data <- data_filt %>%
filter(phase == "ES") %>%
mutate(choice_type = ifelse(stim_chosen == "E", "E", "S"))
# RT per subject and choice type
rtime_es <- es_data %>%
group_by(sub_id, choice_type) %>%
summarise(Mean_rtime = mean(rtime), .groups = "drop")
#log rt
rtime_log <- es_data %>%
group_by(sub_id, choice_type) %>%
summarise(logRT = mean(log(rtime)), .groups = "drop")
# Paired t-test
test_rtime <- t.test(
x = rtime_log %>% filter(choice_type == "E") %>% pull(logRT),
y = rtime_log %>% filter(choice_type == "S") %>% pull(logRT),
paired = TRUE
)
test_rtime
# additional lmer
es_data_log <- es_data %>%
mutate(logRT = log(rtime))
# Fit the model
lmer_model <- lmer(logRT ~ choice_type + (1 + choice_type | sub_id), data = es_data_log)
# Summary with p-value
summary(lmer_model)
colours <- c("S" = "#C2185B",
"E" = "#0077B6")
mean_points <- rtime_es %>%
group_by(choice_type) %>%
summarise(mean_val = mean(Mean_rtime), .groups = "drop")
set.seed(123)  # for reproducibility
rtime_es <- rtime_es %>%
mutate(jittered_x = as.numeric(factor(choice_type)) + runif(n(), -0.1, 0.1))
rt_es_plot <- ggplot() +
geom_boxplot(data = rtime_es,aes(x = choice_type, y = Mean_rtime, fill = choice_type),width = 0.5, alpha = 0.7) +
geom_line(data = rtime_es, aes(x = jittered_x, y = Mean_rtime, group = sub_id),color = "black", alpha = 0.3) +
geom_point(data = rtime_es,aes(x = jittered_x, y = Mean_rtime),color = "black", size = 2, alpha = 0.7) +
geom_text(data = mean_points,aes(x = choice_type, y = mean_val, label = "*"),size = 13, color = "red", inherit.aes = FALSE) +
scale_fill_manual(values = colours) +
labs(title = "Reaction Time (RT) in ES Phase: E vs. S Choices",
x = "Choice Type", y = "Mean RT (seconds)", fill = "Choice Type") +
theme_minimal(base_size = 14) +
theme(
panel.grid.major.y = element_line(color = "gray80", size = 0.4),
panel.grid.major.x = element_blank(),
panel.grid.minor   = element_blank(),
axis.ticks.x      = element_line(color = "black"),
axis.ticks.y      = element_blank(),
axis.ticks.length = unit(4, "pt"),
axis.line         = element_blank(),
plot.title        = element_text(size = 18, face = "bold"),
axis.title.x      = element_text(size = 18, face = "bold"),
axis.title.y      = element_text(size = 18, face = "bold", color = "black"),
axis.text.x       = element_text(size = 17, face = "bold", color = "black"),
axis.text.y       = element_text(size = 15, color = "black"),
legend.text       = element_text(size = 14),
legend.title      = element_text(size = 14, face = "bold")
)
fig_out <- "D:/Aberdeen_Uni_June24/cap/THESIS/Pilot_Analysis/Figures/Pilot_EXP_Mean_rt_E_S_options.pdf"
ggsave(filename = fig_out, plot = rt_es_plot, width = 8, height = 6, dpi = 300)
rt_es_plot
median_rt_by_choice <- es_data %>%
group_by(stim_chosen) %>%
summarise(Median_RT = median(rtime, na.rm = TRUE), .groups = "drop")
median_rt_by_choice
mean_rt_by_choice <- es_data %>%
group_by(stim_chosen) %>%
summarise(Mean_RT = mean(rtime, na.rm = TRUE),
sd_rt = sd(rtime),
sem_rt = sd(rtime) / sqrt(n()),
.groups = "drop")
mean_rt_by_choice
# Load libraries
library(lme4)
library(lmerTest)
library(tidyverse)
library(ggplot2)
library(svglite)
library(sjPlot)
#install.packages("performance")
library(performance)
library(emmeans)
library(ez)
library(dplyr)
library(Matrix)
library(carData)                  # For plotting mixed model
library(effects)                  # For visualizing model effects
library("Hmisc")
library(rstatix)
library(ggpubr)
library(broom)
# general rules:
# everything from the ES phase -> darkorchid
# everything from the EE phaes -> deepskyblue
file <- "C:/Cluster_Github/HDDM_Vero/data_sets/data_sets_Garcia/GarciaParticipants_Eye_Response_Feed_Allfix_addm_OV_Abs_CCT.csv"
data <- read.csv(file)
data <- read.csv(file)
excluded_subs <- c(99, 6)
# filter for ES
es_data <- data %>%
filter(phase == "ES" & !sub_id %in% excluded_subs & !is.na(OV_num_2) & !is.na(AbsValueDiff_2) & !is.na(corr))
# fit models, extract coefficients
get_subject_estimates <- function(sub_data) {
model <- lm(corr ~ OV_num_2 + AbsValueDiff_2, data = sub_data)
summary_model <- summary(model)
coefs <- summary_model$coefficients
results <- tibble(
sub_id = unique(sub_data$sub_id),
predictor = rownames(coefs),
beta_value = coefs[, "Estimate"],
standard_error = coefs[, "Std. Error"],
t_stat = coefs[, "t value"],
p_value = coefs[, "Pr(>|t|)"],
lower_CI = beta_value - 1.96 * standard_error,
upper_CI = beta_value + 1.96 * standard_error
)
return(results)
}
subject_results <- es_data %>%
group_split(sub_id) %>%
map_dfr(get_subject_estimates)
# intercept can be temoved for lter plotting but doesnt have to
subject_results <- subject_results %>%
filter(predictor != "(Intercept)")
output_file <- "D:/Aberdeen_Uni_June24/cap/THESIS/Garcia_Analysis/stats_TingGluth/R_Code_ES_LME_Accuracy_SubjectLevel_Results.csv"
write.csv(subject_results, output_file, row.names = FALSE)
print(subject_results)
data <- read.csv(file)
phase_filter <- "EE"
excluded_subjects <- c(1, 4, 5, 6, 14, 99)
data <- data %>%
filter(phase == phase_filter & !sub_id %in% excluded_subjects) %>%
drop_na(DwellTimeAdvantage, OVcate_2, chose_right)
data$OVcate_2 <- factor(data$OVcate_2, levels = c("low", "medium", "high"))
data <- data %>%
group_by(sub_id, OVcate_2) %>%
mutate(DwellTimeAdvantage_bin = cut(DwellTimeAdvantage,
breaks = unique(quantile(DwellTimeAdvantage, probs = seq(0, 1, length.out = 6), na.rm = TRUE)),
labels = 1:(length(unique(quantile(DwellTimeAdvantage, probs = seq(0, 1, length.out = 6), na.rm = TRUE))) - 1),
include.lowest = TRUE)) %>%
ungroup()
summary_df <- data %>%
group_by(DwellTimeAdvantage_bin, OVcate_2) %>%
summarise(
p_choose_right = mean(chose_right, na.rm = TRUE),
ci = 1.96 * sd(chose_right, na.rm = TRUE) / sqrt(n()),  # 95% CI
.groups = 'drop'
)
summary_df$DwellTimeAdvantage_bin <- factor(summary_df$DwellTimeAdvantage_bin, levels = 1:5, labels = c("L>>R", "L>R", "L ~ R", "R>L", "R>>L"))
colors <- c("low" = "deepskyblue", "medium" = "blue", "high" = "navy")
p <- ggplot(summary_df, aes(x = DwellTimeAdvantage_bin, y = p_choose_right,
group = OVcate_2, color = OVcate_2)) +
geom_point(size = 4) +
geom_line(linewidth = 1.2) +
geom_errorbar(aes(ymin = p_choose_right - ci, ymax = p_choose_right + ci),
width = 0.2, linewidth = 0.8) +
geom_hline(yintercept = 0.5, linetype = "dotted", color = "gray50", linewidth = 1) +
scale_color_manual(values = colors, name = "OV Level") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black", linewidth = 0.8),
legend.position = "top",
legend.text = element_text(size = 18),
legend.title = element_text(size = 18),
axis.text = element_text(size = 19, color = "black"),
axis.title = element_text(size = 20, color = "black"),
plot.title = element_text(size = 19, hjust = 0.5,color = "black"),
plot.background = element_rect(fill = "white", color = "white")
) +
labs(
title = "Dwell-Time Advantage on Choice - EE-Phase",
x = "Dwell Time Advantage (Right > Left)",
y = "P(Choose Right)"
)
ggsave("D:/Aberdeen_Uni_June24/cap/THESIS/Garcia_Analysis/stats_TingGluth/R_regression_eye_metrics_OV_Abs/EE_DTA.pdf",
plot = p, width = 5, height = 6, device = "pdf", bg = "white"
)
print(p)
ggsave("D:/Aberdeen_Uni_June24/cap/THESIS/Garcia_Analysis/stats_TingGluth/R_regression_OV_Abs/EE_DwellTimeAdvantage_Plot.svg",
plot = p, width = 8, height = 6, device = "svg", bg = "white")
